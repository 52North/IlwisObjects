/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g
 *     -                            On : 2019-08-20 12:54:28
 *     -                for the parser : ilwisscriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ilwisscriptParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pilwisscriptParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pilwisscriptParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pilwisscriptParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pilwisscriptParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ilwisscriptParserTokenNames[58+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'and'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'define'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'endif'",
        (pANTLR3_UINT8) "'endwhile'",
        (pANTLR3_UINT8) "'feature-index'",
        (pANTLR3_UINT8) "'featurecoverage'",
        (pANTLR3_UINT8) "'format'",
        (pANTLR3_UINT8) "'from'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'indexes'",
        (pANTLR3_UINT8) "'key='",
        (pANTLR3_UINT8) "'linecoverage'",
        (pANTLR3_UINT8) "'mod'",
        (pANTLR3_UINT8) "'not'",
        (pANTLR3_UINT8) "'or'",
        (pANTLR3_UINT8) "'pointcoverage'",
        (pANTLR3_UINT8) "'polygoncoverage'",
        (pANTLR3_UINT8) "'rastercoverage'",
        (pANTLR3_UINT8) "'resolution'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'table'",
        (pANTLR3_UINT8) "'then'",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'where'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'xor'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 ASTNode *
	script    (pilwisscriptParser ctx);
static 
 ASTNode *
	scriptLine    (pilwisscriptParser ctx);
static 
 ASTNode *
	statement    (pilwisscriptParser ctx);
static 
 SelectNode *
	selectExpr    (pilwisscriptParser ctx);
static 
 QString
	sources    (pilwisscriptParser ctx);
static 
 void
	defineStatement    (pilwisscriptParser ctx);
static 
 AssignmentNode *
	assignmentStatement    (pilwisscriptParser ctx);
static 
 OutParametersNode *
	outParameters    (pilwisscriptParser ctx);
static 
 ParametersNode *
	actualParameters    (pilwisscriptParser ctx);
static 
 TermNode *
	term    (pilwisscriptParser ctx);
static 
 Selector *
	selector    (pilwisscriptParser ctx);
static 
 TermNode *
	negation    (pilwisscriptParser ctx);
static 
 TermNode *
	unary    (pilwisscriptParser ctx);
static 
 MultiplicationNode *
	mult    (pilwisscriptParser ctx);
static 
 AddNode *
	add    (pilwisscriptParser ctx);
static 
 RelationNode *
	relation    (pilwisscriptParser ctx);
static 
 ExpressionNode *
	expression    (pilwisscriptParser ctx);
static 
 CommandNode *
	commandStatement    (pilwisscriptParser ctx);
static 
 FunctionStatementNode *
	functionStatement    (pilwisscriptParser ctx);
static 
 WhileNode *
	whileStatement    (pilwisscriptParser ctx);
static 
 BreakNode *
	breakStatement    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatPart    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatters    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatter    (pilwisscriptParser ctx);
static 
 Formatter *
	dataFormatter    (pilwisscriptParser ctx);
static 
 QString
	datatype    (pilwisscriptParser ctx);
static 
 DomainFormatter *
	domainFormatter    (pilwisscriptParser ctx);
static 
 Ifnode *
	ifStatement    (pilwisscriptParser ctx);
static 
 ReturnNode *
	returnStatement    (pilwisscriptParser ctx);
static void	ilwisscriptParserFree(pilwisscriptParser ctx);
static void     ilwisscriptParserReset (pilwisscriptParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ilwisscriptParserNewSSD(instream, NULL);
}

/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pilwisscriptParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pilwisscriptParser) ANTLR3_CALLOC(1, sizeof(ilwisscriptParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ilwisscriptParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ilwisscriptParser interface
     */
    ctx->script	= script;
    ctx->scriptLine	= scriptLine;
    ctx->statement	= statement;
    ctx->selectExpr	= selectExpr;
    ctx->sources	= sources;
    ctx->defineStatement	= defineStatement;
    ctx->assignmentStatement	= assignmentStatement;
    ctx->outParameters	= outParameters;
    ctx->actualParameters	= actualParameters;
    ctx->term	= term;
    ctx->selector	= selector;
    ctx->negation	= negation;
    ctx->unary	= unary;
    ctx->mult	= mult;
    ctx->add	= add;
    ctx->relation	= relation;
    ctx->expression	= expression;
    ctx->commandStatement	= commandStatement;
    ctx->functionStatement	= functionStatement;
    ctx->whileStatement	= whileStatement;
    ctx->breakStatement	= breakStatement;
    ctx->formatPart	= formatPart;
    ctx->formatters	= formatters;
    ctx->formatter	= formatter;
    ctx->dataFormatter	= dataFormatter;
    ctx->datatype	= datatype;
    ctx->domainFormatter	= domainFormatter;
    ctx->ifStatement	= ifStatement;
    ctx->returnStatement	= returnStatement;
    ctx->free			= ilwisscriptParserFree;
    ctx->reset			= ilwisscriptParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ilwisscriptParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ilwisscriptParserReset (pilwisscriptParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ilwisscriptParserFree(pilwisscriptParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ilwisscriptParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scriptLine_in_script42  */
static	ANTLR3_BITWORD FOLLOW_scriptLine_in_script42_bits[]	= { ANTLR3_UINT64_LIT(0x0400050200000A22) };
static  ANTLR3_BITSET_LIST FOLLOW_scriptLine_in_script42	= { FOLLOW_scriptLine_in_script42_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_scriptLine70  */
static	ANTLR3_BITWORD FOLLOW_statement_in_scriptLine70_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_scriptLine70	= { FOLLOW_statement_in_scriptLine70_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_scriptLine79  */
static	ANTLR3_BITWORD FOLLOW_22_in_scriptLine79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_scriptLine79	= { FOLLOW_22_in_scriptLine79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_scriptLine85  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_scriptLine85_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_scriptLine85	= { FOLLOW_EOL_in_scriptLine85_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentStatement_in_statement101  */
static	ANTLR3_BITWORD FOLLOW_assignmentStatement_in_statement101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentStatement_in_statement101	= { FOLLOW_assignmentStatement_in_statement101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement111  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement111	= { FOLLOW_ifStatement_in_statement111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_statement122  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_statement122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_statement122	= { FOLLOW_whileStatement_in_statement122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionStatement_in_statement133  */
static	ANTLR3_BITWORD FOLLOW_functionStatement_in_statement133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionStatement_in_statement133	= { FOLLOW_functionStatement_in_statement133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_commandStatement_in_statement143  */
static	ANTLR3_BITWORD FOLLOW_commandStatement_in_statement143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_commandStatement_in_statement143	= { FOLLOW_commandStatement_in_statement143_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_statement153  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_statement153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_statement153	= { FOLLOW_dataFormatter_in_statement153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defineStatement_in_statement164  */
static	ANTLR3_BITWORD FOLLOW_defineStatement_in_statement164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defineStatement_in_statement164	= { FOLLOW_defineStatement_in_statement164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_selectExpr191  */
static	ANTLR3_BITWORD FOLLOW_43_in_selectExpr191_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_selectExpr191	= { FOLLOW_43_in_selectExpr191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_selectExpr193  */
static	ANTLR3_BITWORD FOLLOW_41_in_selectExpr193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000A00) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_selectExpr193	= { FOLLOW_41_in_selectExpr193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sources_in_selectExpr195  */
static	ANTLR3_BITWORD FOLLOW_sources_in_selectExpr195_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sources_in_selectExpr195	= { FOLLOW_sources_in_selectExpr195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_selectExpr197  */
static	ANTLR3_BITWORD FOLLOW_57_in_selectExpr197_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_selectExpr197	= { FOLLOW_57_in_selectExpr197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_selectExpr201  */
static	ANTLR3_BITWORD FOLLOW_expression_in_selectExpr201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_selectExpr201	= { FOLLOW_expression_in_selectExpr201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_sources218  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_sources218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_sources218	= { FOLLOW_STRING_in_sources218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_sources229  */
static	ANTLR3_BITWORD FOLLOW_ID_in_sources229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_sources229	= { FOLLOW_ID_in_sources229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_defineStatement247  */
static	ANTLR3_BITWORD FOLLOW_33_in_defineStatement247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_defineStatement247	= { FOLLOW_33_in_defineStatement247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_defineStatement249  */
static	ANTLR3_BITWORD FOLLOW_ID_in_defineStatement249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_defineStatement249	= { FOLLOW_ID_in_defineStatement249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_defineStatement251  */
static	ANTLR3_BITWORD FOLLOW_25_in_defineStatement251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_defineStatement251	= { FOLLOW_25_in_defineStatement251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_defineStatement253  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_defineStatement253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_defineStatement253	= { FOLLOW_STRING_in_defineStatement253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_outParameters_in_assignmentStatement274  */
static	ANTLR3_BITWORD FOLLOW_outParameters_in_assignmentStatement274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_outParameters_in_assignmentStatement274	= { FOLLOW_outParameters_in_assignmentStatement274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_assignmentStatement284  */
static	ANTLR3_BITWORD FOLLOW_25_in_assignmentStatement284_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_assignmentStatement284	= { FOLLOW_25_in_assignmentStatement284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_assignmentStatement295  */
static	ANTLR3_BITWORD FOLLOW_expression_in_assignmentStatement295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_assignmentStatement295	= { FOLLOW_expression_in_assignmentStatement295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_assignmentStatement322  */
static	ANTLR3_BITWORD FOLLOW_ID_in_assignmentStatement322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_assignmentStatement322	= { FOLLOW_ID_in_assignmentStatement322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_assignmentStatement324  */
static	ANTLR3_BITWORD FOLLOW_25_in_assignmentStatement324_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_assignmentStatement324	= { FOLLOW_25_in_assignmentStatement324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selectExpr_in_assignmentStatement349  */
static	ANTLR3_BITWORD FOLLOW_selectExpr_in_assignmentStatement349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selectExpr_in_assignmentStatement349	= { FOLLOW_selectExpr_in_assignmentStatement349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters377  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters377_bits[]	= { ANTLR3_UINT64_LIT(0x1000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters377	= { FOLLOW_ID_in_outParameters377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters382  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters382_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters382	= { FOLLOW_selector_in_outParameters382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters415  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters415	= { FOLLOW_formatPart_in_outParameters415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_outParameters428  */
static	ANTLR3_BITWORD FOLLOW_18_in_outParameters428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_outParameters428	= { FOLLOW_18_in_outParameters428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters432  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters432_bits[]	= { ANTLR3_UINT64_LIT(0x1000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters432	= { FOLLOW_ID_in_outParameters432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters437  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters437_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters437	= { FOLLOW_selector_in_outParameters437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters469  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters469	= { FOLLOW_formatPart_in_outParameters469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_outParameters491  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_outParameters491_bits[]	= { ANTLR3_UINT64_LIT(0x1000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_outParameters491	= { FOLLOW_STRING_in_outParameters491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters496  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters496_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters496	= { FOLLOW_selector_in_outParameters496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters528  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters528	= { FOLLOW_formatPart_in_outParameters528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_outParameters541  */
static	ANTLR3_BITWORD FOLLOW_18_in_outParameters541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_outParameters541	= { FOLLOW_18_in_outParameters541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters545  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters545_bits[]	= { ANTLR3_UINT64_LIT(0x1000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters545	= { FOLLOW_ID_in_outParameters545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters550  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters550_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters550	= { FOLLOW_selector_in_outParameters550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters582  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters582	= { FOLLOW_formatPart_in_outParameters582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters625  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters625	= { FOLLOW_expression_in_actualParameters625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_actualParameters639  */
static	ANTLR3_BITWORD FOLLOW_18_in_actualParameters639_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_actualParameters639	= { FOLLOW_18_in_actualParameters639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters648  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters648	= { FOLLOW_expression_in_actualParameters648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term678  */
static	ANTLR3_BITWORD FOLLOW_14_in_term678_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term678	= { FOLLOW_14_in_term678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_term680  */
static	ANTLR3_BITWORD FOLLOW_expression_in_term680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_term680	= { FOLLOW_expression_in_term680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term682  */
static	ANTLR3_BITWORD FOLLOW_15_in_term682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term682	= { FOLLOW_15_in_term682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_term693  */
static	ANTLR3_BITWORD FOLLOW_INT_in_term693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_term693	= { FOLLOW_INT_in_term693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_term705  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_term705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_term705	= { FOLLOW_FLOAT_in_term705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_term717  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_term717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_term717	= { FOLLOW_STRING_in_term717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term733  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term733	= { FOLLOW_ID_in_term733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term735  */
static	ANTLR3_BITWORD FOLLOW_14_in_term735_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term735	= { FOLLOW_14_in_term735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_term747  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_term747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_term747	= { FOLLOW_actualParameters_in_term747_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term758  */
static	ANTLR3_BITWORD FOLLOW_15_in_term758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term758	= { FOLLOW_15_in_term758_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term767  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term767	= { FOLLOW_ID_in_term767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term769  */
static	ANTLR3_BITWORD FOLLOW_14_in_term769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term769	= { FOLLOW_14_in_term769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term791  */
static	ANTLR3_BITWORD FOLLOW_15_in_term791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term791	= { FOLLOW_15_in_term791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term809  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term809	= { FOLLOW_ID_in_term809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_term823  */
static	ANTLR3_BITWORD FOLLOW_selector_in_term823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_term823	= { FOLLOW_selector_in_term823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term840  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term840	= { FOLLOW_ID_in_term840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector866  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector866	= { FOLLOW_29_in_selector866_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector870  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector870	= { FOLLOW_INT_in_selector870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector874  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector874	= { FOLLOW_INT_in_selector874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector876  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector876	= { FOLLOW_18_in_selector876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector880  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector880	= { FOLLOW_INT_in_selector880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector884  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector884	= { FOLLOW_INT_in_selector884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector886  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector886	= { FOLLOW_30_in_selector886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector894  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector894	= { FOLLOW_29_in_selector894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector898  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector898	= { FOLLOW_ID_in_selector898_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector901  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector901_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector901	= { FOLLOW_18_in_selector901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_selector903  */
static	ANTLR3_BITWORD FOLLOW_44_in_selector903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_selector903	= { FOLLOW_44_in_selector903_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector907  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector907	= { FOLLOW_ID_in_selector907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector912  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector912	= { FOLLOW_30_in_selector912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector921  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector921	= { FOLLOW_29_in_selector921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector923  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector923	= { FOLLOW_INT_in_selector923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector925  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector925	= { FOLLOW_30_in_selector925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector937  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector937	= { FOLLOW_29_in_selector937_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector941  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector941	= { FOLLOW_ID_in_selector941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector946  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector946	= { FOLLOW_ID_in_selector946_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector949  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector949_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector949	= { FOLLOW_18_in_selector949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_selector950  */
static	ANTLR3_BITWORD FOLLOW_44_in_selector950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_selector950	= { FOLLOW_44_in_selector950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector954  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector954	= { FOLLOW_ID_in_selector954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector958  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector958	= { FOLLOW_30_in_selector958_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector967  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector967	= { FOLLOW_29_in_selector967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector971  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector971	= { FOLLOW_INT_in_selector971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector976  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector976	= { FOLLOW_INT_in_selector976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector978  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector978	= { FOLLOW_30_in_selector978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector988  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector988	= { FOLLOW_29_in_selector988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector992  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector992	= { FOLLOW_ID_in_selector992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector996  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector996	= { FOLLOW_ID_in_selector996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector998  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector998	= { FOLLOW_18_in_selector998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1002  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1002	= { FOLLOW_INT_in_selector1002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1006  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1006	= { FOLLOW_INT_in_selector1006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector1009  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector1009	= { FOLLOW_18_in_selector1009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_selector1011  */
static	ANTLR3_BITWORD FOLLOW_44_in_selector1011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_selector1011	= { FOLLOW_44_in_selector1011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1015  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1015	= { FOLLOW_ID_in_selector1015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector1020  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector1020	= { FOLLOW_30_in_selector1020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_negation1045  */
static	ANTLR3_BITWORD FOLLOW_47_in_negation1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_negation1045	= { FOLLOW_47_in_negation1045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_negation1061  */
static	ANTLR3_BITWORD FOLLOW_term_in_negation1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_negation1061	= { FOLLOW_term_in_negation1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_unary1089  */
static	ANTLR3_BITWORD FOLLOW_17_in_unary1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_unary1089	= { FOLLOW_17_in_unary1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_unary1101  */
static	ANTLR3_BITWORD FOLLOW_19_in_unary1101_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_unary1101	= { FOLLOW_19_in_unary1101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_negation_in_unary1117  */
static	ANTLR3_BITWORD FOLLOW_negation_in_unary1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_negation_in_unary1117	= { FOLLOW_negation_in_unary1117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1143  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1143_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1143	= { FOLLOW_unary_in_mult1143_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_mult1158  */
static	ANTLR3_BITWORD FOLLOW_16_in_mult1158_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_mult1158	= { FOLLOW_16_in_mult1158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_mult1171  */
static	ANTLR3_BITWORD FOLLOW_21_in_mult1171_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_mult1171	= { FOLLOW_21_in_mult1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_mult1183  */
static	ANTLR3_BITWORD FOLLOW_46_in_mult1183_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_mult1183	= { FOLLOW_46_in_mult1183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1200  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1200_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1200	= { FOLLOW_unary_in_mult1200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1235  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1235_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1235	= { FOLLOW_mult_in_add1235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_add1250  */
static	ANTLR3_BITWORD FOLLOW_17_in_add1250_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_add1250	= { FOLLOW_17_in_add1250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_add1266  */
static	ANTLR3_BITWORD FOLLOW_19_in_add1266_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_add1266	= { FOLLOW_19_in_add1266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1286  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1286_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1286	= { FOLLOW_mult_in_add1286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1319  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1319_bits[]	= { ANTLR3_UINT64_LIT(0x000000001D802002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1319	= { FOLLOW_add_in_relation1319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_relation1337  */
static	ANTLR3_BITWORD FOLLOW_26_in_relation1337_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_relation1337	= { FOLLOW_26_in_relation1337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_relation1351  */
static	ANTLR3_BITWORD FOLLOW_13_in_relation1351_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_relation1351	= { FOLLOW_13_in_relation1351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_relation1365  */
static	ANTLR3_BITWORD FOLLOW_23_in_relation1365_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_relation1365	= { FOLLOW_23_in_relation1365_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_relation1379  */
static	ANTLR3_BITWORD FOLLOW_24_in_relation1379_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_relation1379	= { FOLLOW_24_in_relation1379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_relation1393  */
static	ANTLR3_BITWORD FOLLOW_28_in_relation1393_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_relation1393	= { FOLLOW_28_in_relation1393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_relation1407  */
static	ANTLR3_BITWORD FOLLOW_27_in_relation1407_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_relation1407	= { FOLLOW_27_in_relation1407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1425  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1425_bits[]	= { ANTLR3_UINT64_LIT(0x000000001D802002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1425	= { FOLLOW_add_in_relation1425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1459  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1459_bits[]	= { ANTLR3_UINT64_LIT(0x0801000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1459	= { FOLLOW_relation_in_expression1459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_expression1479  */
static	ANTLR3_BITWORD FOLLOW_31_in_expression1479_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_expression1479	= { FOLLOW_31_in_expression1479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_expression1493  */
static	ANTLR3_BITWORD FOLLOW_48_in_expression1493_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_expression1493	= { FOLLOW_48_in_expression1493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_expression1507  */
static	ANTLR3_BITWORD FOLLOW_59_in_expression1507_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_expression1507	= { FOLLOW_59_in_expression1507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1524  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1524_bits[]	= { ANTLR3_UINT64_LIT(0x0801000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1524	= { FOLLOW_relation_in_expression1524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1561  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1561	= { FOLLOW_ID_in_commandStatement1561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_commandStatement1580  */
static	ANTLR3_BITWORD FOLLOW_20_in_commandStatement1580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_commandStatement1580	= { FOLLOW_20_in_commandStatement1580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1588  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1588	= { FOLLOW_ID_in_commandStatement1588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_commandStatement1599  */
static	ANTLR3_BITWORD FOLLOW_25_in_commandStatement1599_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_commandStatement1599	= { FOLLOW_25_in_commandStatement1599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_commandStatement1602  */
static	ANTLR3_BITWORD FOLLOW_expression_in_commandStatement1602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_commandStatement1602	= { FOLLOW_expression_in_commandStatement1602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_functionStatement1641  */
static	ANTLR3_BITWORD FOLLOW_ID_in_functionStatement1641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_functionStatement1641	= { FOLLOW_ID_in_functionStatement1641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_functionStatement1651  */
static	ANTLR3_BITWORD FOLLOW_14_in_functionStatement1651_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_functionStatement1651	= { FOLLOW_14_in_functionStatement1651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_functionStatement1653  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_functionStatement1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_functionStatement1653	= { FOLLOW_actualParameters_in_functionStatement1653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_functionStatement1663  */
static	ANTLR3_BITWORD FOLLOW_15_in_functionStatement1663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_functionStatement1663	= { FOLLOW_15_in_functionStatement1663_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_whileStatement1685  */
static	ANTLR3_BITWORD FOLLOW_58_in_whileStatement1685_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_whileStatement1685	= { FOLLOW_58_in_whileStatement1685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1687  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1687	= { FOLLOW_expression_in_whileStatement1687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_whileStatement1689  */
static	ANTLR3_BITWORD FOLLOW_34_in_whileStatement1689_bits[]	= { ANTLR3_UINT64_LIT(0x0400052300000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_whileStatement1689	= { FOLLOW_34_in_whileStatement1689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1692  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1692_bits[]	= { ANTLR3_UINT64_LIT(0x0400052300000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1692	= { FOLLOW_EOL_in_whileStatement1692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1703  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1703_bits[]	= { ANTLR3_UINT64_LIT(0x0400052300000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1703	= { FOLLOW_statement_in_whileStatement1703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_whileStatement1721  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_whileStatement1721_bits[]	= { ANTLR3_UINT64_LIT(0x0400052300000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_whileStatement1721	= { FOLLOW_breakStatement_in_whileStatement1721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1734  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1734_bits[]	= { ANTLR3_UINT64_LIT(0x0400052300000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1734	= { FOLLOW_EOL_in_whileStatement1734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_whileStatement1747  */
static	ANTLR3_BITWORD FOLLOW_37_in_whileStatement1747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_whileStatement1747	= { FOLLOW_37_in_whileStatement1747_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_breakStatement1768  */
static	ANTLR3_BITWORD FOLLOW_32_in_breakStatement1768_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_breakStatement1768	= { FOLLOW_32_in_breakStatement1768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_breakStatement1770  */
static	ANTLR3_BITWORD FOLLOW_56_in_breakStatement1770_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_breakStatement1770	= { FOLLOW_56_in_breakStatement1770_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_breakStatement1772  */
static	ANTLR3_BITWORD FOLLOW_expression_in_breakStatement1772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_breakStatement1772	= { FOLLOW_expression_in_breakStatement1772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_formatPart1794  */
static	ANTLR3_BITWORD FOLLOW_60_in_formatPart1794_bits[]	= { ANTLR3_UINT64_LIT(0x0010010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_formatPart1794	= { FOLLOW_60_in_formatPart1794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatters_in_formatPart1796  */
static	ANTLR3_BITWORD FOLLOW_formatters_in_formatPart1796_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formatters_in_formatPart1796	= { FOLLOW_formatters_in_formatPart1796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_formatPart1798  */
static	ANTLR3_BITWORD FOLLOW_61_in_formatPart1798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_formatPart1798	= { FOLLOW_61_in_formatPart1798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatters1821  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatters1821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatters1821	= { FOLLOW_dataFormatter_in_formatters1821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatters1831  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatters1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatters1831	= { FOLLOW_domainFormatter_in_formatters1831_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatters1840  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatters1840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatters1840	= { FOLLOW_domainFormatter_in_formatters1840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatters1842  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatters1842_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatters1842	= { FOLLOW_22_in_formatters1842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatters1844  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatters1844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatters1844	= { FOLLOW_dataFormatter_in_formatters1844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatters1851  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatters1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatters1851	= { FOLLOW_dataFormatter_in_formatters1851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatters1853  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatters1853_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatters1853	= { FOLLOW_22_in_formatters1853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatters1855  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatters1855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatters1855	= { FOLLOW_domainFormatter_in_formatters1855_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatter1874  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatter1874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatter1874	= { FOLLOW_dataFormatter_in_formatter1874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatter1884  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatter1884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatter1884	= { FOLLOW_domainFormatter_in_formatter1884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_dataFormatter1909  */
static	ANTLR3_BITWORD FOLLOW_40_in_dataFormatter1909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_dataFormatter1909	= { FOLLOW_40_in_dataFormatter1909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1911  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1911	= { FOLLOW_14_in_dataFormatter1911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter1913  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter1913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter1913	= { FOLLOW_ID_in_dataFormatter1913_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1915  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1915	= { FOLLOW_18_in_dataFormatter1915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1917  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1917	= { FOLLOW_STRING_in_dataFormatter1917_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1919  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1919_bits[]	= { ANTLR3_UINT64_LIT(0x004E20C000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1919	= { FOLLOW_18_in_dataFormatter1919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_datatype_in_dataFormatter1923  */
static	ANTLR3_BITWORD FOLLOW_datatype_in_dataFormatter1923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_datatype_in_dataFormatter1923	= { FOLLOW_datatype_in_dataFormatter1923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1925  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1925	= { FOLLOW_15_in_dataFormatter1925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_dataFormatter1932  */
static	ANTLR3_BITWORD FOLLOW_40_in_dataFormatter1932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_dataFormatter1932	= { FOLLOW_40_in_dataFormatter1932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1934  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1934	= { FOLLOW_14_in_dataFormatter1934_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter1936  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter1936	= { FOLLOW_ID_in_dataFormatter1936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1938  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1938	= { FOLLOW_18_in_dataFormatter1938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1940  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1940	= { FOLLOW_STRING_in_dataFormatter1940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1942  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1942	= { FOLLOW_15_in_dataFormatter1942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_dataFormatter1951  */
static	ANTLR3_BITWORD FOLLOW_40_in_dataFormatter1951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_dataFormatter1951	= { FOLLOW_40_in_dataFormatter1951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1953  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1953	= { FOLLOW_14_in_dataFormatter1953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1955  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1955	= { FOLLOW_STRING_in_dataFormatter1955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1957  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1957	= { FOLLOW_15_in_dataFormatter1957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_datatype1980  */
static	ANTLR3_BITWORD FOLLOW_51_in_datatype1980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_datatype1980	= { FOLLOW_51_in_datatype1980_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_datatype1990  */
static	ANTLR3_BITWORD FOLLOW_50_in_datatype1990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_datatype1990	= { FOLLOW_50_in_datatype1990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_datatype2000  */
static	ANTLR3_BITWORD FOLLOW_45_in_datatype2000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_datatype2000	= { FOLLOW_45_in_datatype2000_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_datatype2010  */
static	ANTLR3_BITWORD FOLLOW_49_in_datatype2010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_datatype2010	= { FOLLOW_49_in_datatype2010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_datatype2020  */
static	ANTLR3_BITWORD FOLLOW_39_in_datatype2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_datatype2020	= { FOLLOW_39_in_datatype2020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_datatype2055  */
static	ANTLR3_BITWORD FOLLOW_38_in_datatype2055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_datatype2055	= { FOLLOW_38_in_datatype2055_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_datatype2092  */
static	ANTLR3_BITWORD FOLLOW_54_in_datatype2092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_datatype2092	= { FOLLOW_54_in_datatype2092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_domainFormatter2119  */
static	ANTLR3_BITWORD FOLLOW_52_in_domainFormatter2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_domainFormatter2119	= { FOLLOW_52_in_domainFormatter2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_domainFormatter2121  */
static	ANTLR3_BITWORD FOLLOW_14_in_domainFormatter2121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_domainFormatter2121	= { FOLLOW_14_in_domainFormatter2121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_domainFormatter2125  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_domainFormatter2125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_domainFormatter2125	= { FOLLOW_FLOAT_in_domainFormatter2125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_domainFormatter2127  */
static	ANTLR3_BITWORD FOLLOW_15_in_domainFormatter2127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_domainFormatter2127	= { FOLLOW_15_in_domainFormatter2127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_domainFormatter2134  */
static	ANTLR3_BITWORD FOLLOW_52_in_domainFormatter2134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_domainFormatter2134	= { FOLLOW_52_in_domainFormatter2134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_domainFormatter2136  */
static	ANTLR3_BITWORD FOLLOW_14_in_domainFormatter2136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_domainFormatter2136	= { FOLLOW_14_in_domainFormatter2136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_domainFormatter2140  */
static	ANTLR3_BITWORD FOLLOW_INT_in_domainFormatter2140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_domainFormatter2140	= { FOLLOW_INT_in_domainFormatter2140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_domainFormatter2142  */
static	ANTLR3_BITWORD FOLLOW_15_in_domainFormatter2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_domainFormatter2142	= { FOLLOW_15_in_domainFormatter2142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_ifStatement2165  */
static	ANTLR3_BITWORD FOLLOW_42_in_ifStatement2165_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_ifStatement2165	= { FOLLOW_42_in_ifStatement2165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement2167  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement2167_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement2167	= { FOLLOW_expression_in_ifStatement2167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2170  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2170_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2170	= { FOLLOW_EOL_in_ifStatement2170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_ifStatement2174  */
static	ANTLR3_BITWORD FOLLOW_55_in_ifStatement2174_bits[]	= { ANTLR3_UINT64_LIT(0x0400050200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_ifStatement2174	= { FOLLOW_55_in_ifStatement2174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2176  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2176_bits[]	= { ANTLR3_UINT64_LIT(0x0400050200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2176	= { FOLLOW_EOL_in_ifStatement2176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2182  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2182_bits[]	= { ANTLR3_UINT64_LIT(0x0400051A00000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2182	= { FOLLOW_statement_in_ifStatement2182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2186  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2186_bits[]	= { ANTLR3_UINT64_LIT(0x0400051A00000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2186	= { FOLLOW_EOL_in_ifStatement2186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_ifStatement2198  */
static	ANTLR3_BITWORD FOLLOW_35_in_ifStatement2198_bits[]	= { ANTLR3_UINT64_LIT(0x0400050200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_ifStatement2198	= { FOLLOW_35_in_ifStatement2198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2200  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2200_bits[]	= { ANTLR3_UINT64_LIT(0x0400050200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2200	= { FOLLOW_EOL_in_ifStatement2200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2206  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2206_bits[]	= { ANTLR3_UINT64_LIT(0x0400051200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2206	= { FOLLOW_statement_in_ifStatement2206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2211  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2211_bits[]	= { ANTLR3_UINT64_LIT(0x0400051200000A20) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2211	= { FOLLOW_EOL_in_ifStatement2211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_ifStatement2223  */
static	ANTLR3_BITWORD FOLLOW_36_in_ifStatement2223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_ifStatement2223	= { FOLLOW_36_in_ifStatement2223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_returnStatement2243  */
static	ANTLR3_BITWORD FOLLOW_53_in_returnStatement2243_bits[]	= { ANTLR3_UINT64_LIT(0x00008000000A4F02) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_returnStatement2243	= { FOLLOW_53_in_returnStatement2243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2245  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2245	= { FOLLOW_expression_in_returnStatement2245_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start script
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:49:1: script returns [ ASTNode *node] : ( scriptLine )+ ;
 */
static ASTNode *
script(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * scriptLine1;
    #undef	RETURN_TYPE_scriptLine1
    #define	RETURN_TYPE_scriptLine1 ASTNode *

    /* Initialize rule variables
     */


    	node = new ScriptNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:53:2: ( ( scriptLine )+ )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:53:4: ( scriptLine )+
        {
            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:53:4: ( scriptLine )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case EOL:
            	case ID:
            	case STRING:
            	case 33:
            	case 40:
            	case 42:
            	case 58:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:53:6: scriptLine
            	        {
            	            FOLLOWPUSH(FOLLOW_scriptLine_in_script42);
            	            scriptLine1=scriptLine(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulescriptEx;
            	            }


            	            {
            	                node->addChild(scriptLine1
            	                ); 
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulescriptEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulescriptEx; /* Prevent compiler warnings */
    rulescriptEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end script */

/**
 * $ANTLR start scriptLine
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:56:1: scriptLine returns [ ASTNode *node] : ( statement ';' | EOL );
 */
static ASTNode *
scriptLine(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * statement2;
    #undef	RETURN_TYPE_statement2
    #define	RETURN_TYPE_statement2 ASTNode *

    /* Initialize rule variables
     */


    	node =  new ScriptLineNode();

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:60:2: ( statement ';' | EOL )

            ANTLR3_UINT32 alt2;

            alt2=2;

            switch ( LA(1) )
            {
            case ID:
            case STRING:
            case 33:
            case 40:
            case 42:
            case 58:
            	{
            		alt2=1;
            	}
                break;
            case EOL:
            	{
            		alt2=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulescriptLineEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:60:4: statement ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_scriptLine70);
        	        statement2=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(statement2
        	            ); 
        	        }


        	         MATCHT(22, &FOLLOW_22_in_scriptLine79);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:61:5: EOL
        	    {
        	         MATCHT(EOL, &FOLLOW_EOL_in_scriptLine85);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulescriptLineEx; /* Prevent compiler warnings */
    rulescriptLineEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end scriptLine */

/**
 * $ANTLR start statement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:64:1: statement returns [ ASTNode *node] : ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement );
 */
static ASTNode *
statement(pilwisscriptParser ctx)
{
    ASTNode * node;


    AssignmentNode * assignmentStatement3;
    #undef	RETURN_TYPE_assignmentStatement3
    #define	RETURN_TYPE_assignmentStatement3 AssignmentNode *

    Ifnode * ifStatement4;
    #undef	RETURN_TYPE_ifStatement4
    #define	RETURN_TYPE_ifStatement4 Ifnode *

    WhileNode * whileStatement5;
    #undef	RETURN_TYPE_whileStatement5
    #define	RETURN_TYPE_whileStatement5 WhileNode *

    FunctionStatementNode * functionStatement6;
    #undef	RETURN_TYPE_functionStatement6
    #define	RETURN_TYPE_functionStatement6 FunctionStatementNode *

    CommandNode * commandStatement7;
    #undef	RETURN_TYPE_commandStatement7
    #define	RETURN_TYPE_commandStatement7 CommandNode *

    Formatter * dataFormatter8;
    #undef	RETURN_TYPE_dataFormatter8
    #define	RETURN_TYPE_dataFormatter8 Formatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:65:2: ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement )

            ANTLR3_UINT32 alt3;

            alt3=7;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 18:
            		case 25:
            		case 29:
            		case 60:
            			{
            				alt3=1;
            			}
            		    break;
            		case 14:
            			{
            				alt3=4;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case STRING:
            		case 20:
            		case 22:
            		case 32:
            		case 33:
            		case 35:
            		case 36:
            		case 37:
            		case 40:
            		case 42:
            		case 58:
            			{
            				alt3=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 3;
            		    EXCEPTION->state        = 1;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case STRING:
            	{
            		alt3=1;
            	}
                break;
            case 42:
            	{
            		alt3=2;
            	}
                break;
            case 58:
            	{
            		alt3=3;
            	}
                break;
            case 40:
            	{
            		alt3=6;
            	}
                break;
            case 33:
            	{
            		alt3=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:65:4: assignmentStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentStatement_in_statement101);
        	        assignmentStatement3=assignmentStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = assignmentStatement3
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:66:4: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement111);
        	        ifStatement4=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = ifStatement4
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:67:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_statement122);
        	        whileStatement5=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = whileStatement5
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:68:4: functionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_functionStatement_in_statement133);
        	        functionStatement6=functionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = functionStatement6
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:69:4: commandStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_commandStatement_in_statement143);
        	        commandStatement7=commandStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = commandStatement7
        	            ; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:70:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_statement153);
        	        dataFormatter8=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = dataFormatter8
        	            ; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:71:4: defineStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_defineStatement_in_statement164);
        	        defineStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end statement */

/**
 * $ANTLR start selectExpr
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:74:1: selectExpr returns [SelectNode *node] : 'indexes' 'from' sources 'where' expr= expression ;
 */
static SelectNode *
selectExpr(pilwisscriptParser ctx)
{
    SelectNode * node;


    ExpressionNode * expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr ExpressionNode *

    QString sources9;
    #undef	RETURN_TYPE_sources9
    #define	RETURN_TYPE_sources9 QString

    /* Initialize rule variables
     */


      node = new SelectNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:78:2: ( 'indexes' 'from' sources 'where' expr= expression )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:78:9: 'indexes' 'from' sources 'where' expr= expression
        {
             MATCHT(43, &FOLLOW_43_in_selectExpr191);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


             MATCHT(41, &FOLLOW_41_in_selectExpr193);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            FOLLOWPUSH(FOLLOW_sources_in_selectExpr195);
            sources9=sources(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


             MATCHT(57, &FOLLOW_57_in_selectExpr197);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_selectExpr201);
            expr=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            {
                  node->setInput(sources9
                );
                								 node->setExpression(expr
                );
                									    
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselectExprEx; /* Prevent compiler warnings */
    ruleselectExprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end selectExpr */

/**
 * $ANTLR start sources
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:83:1: sources returns [ QString source] : ( STRING | ID );
 */
static QString
sources(pilwisscriptParser ctx)
{
    QString source;


    pANTLR3_COMMON_TOKEN    STRING10;
    pANTLR3_COMMON_TOKEN    ID11;

    /* Initialize rule variables
     */

    STRING10       = NULL;
    ID11       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:84:2: ( STRING | ID )

            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) )
            {
            case STRING:
            	{
            		alt4=1;
            	}
                break;
            case ID:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulesourcesEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:84:4: STRING
        	    {
        	        STRING10 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_sources218);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourcesEx;
        	        }


        	        {
        	             source = "url|" + QString((char *)((STRING10->getText(STRING10))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:85:4: ID
        	    {
        	        ID11 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_sources229);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourcesEx;
        	        }


        	        {
        	             source = "id|" + QString((char *)((ID11->getText(ID11))->chars));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesourcesEx; /* Prevent compiler warnings */
    rulesourcesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return source;
}
/* $ANTLR end sources */

/**
 * $ANTLR start defineStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:88:1: defineStatement : 'define' ID '=' STRING ;
 */
static void
defineStatement(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:89:2: ( 'define' ID '=' STRING )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:89:4: 'define' ID '=' STRING
        {
             MATCHT(33, &FOLLOW_33_in_defineStatement247);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(ID, &FOLLOW_ID_in_defineStatement249);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(25, &FOLLOW_25_in_defineStatement251);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(STRING, &FOLLOW_STRING_in_defineStatement253);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledefineStatementEx; /* Prevent compiler warnings */
    ruledefineStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end defineStatement */

/**
 * $ANTLR start assignmentStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:93:1: assignmentStatement returns [ AssignmentNode *node] : ( outParameters '=' expression |id1= ID '=' selectExpr );
 */
static AssignmentNode *
assignmentStatement(pilwisscriptParser ctx)
{
    AssignmentNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    OutParametersNode * outParameters12;
    #undef	RETURN_TYPE_outParameters12
    #define	RETURN_TYPE_outParameters12 OutParametersNode *

    ExpressionNode * expression13;
    #undef	RETURN_TYPE_expression13
    #define	RETURN_TYPE_expression13 ExpressionNode *

    SelectNode * selectExpr14;
    #undef	RETURN_TYPE_selectExpr14
    #define	RETURN_TYPE_selectExpr14 SelectNode *

    /* Initialize rule variables
     */


    	node= new AssignmentNode();

    id1       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:97:2: ( outParameters '=' expression |id1= ID '=' selectExpr )

            ANTLR3_UINT32 alt5;

            alt5=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 25:
            			{
            				switch ( LA(3) )
            				{
            				case 43:
            					{
            						alt5=2;
            					}
            				    break;
            				case FLOAT:
            				case ID:
            				case INT:
            				case STRING:
            				case 14:
            				case 17:
            				case 19:
            				case 47:
            					{
            						alt5=1;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 3;


            				    goto ruleassignmentStatementEx;

            				}

            			}
            		    break;
            		case 18:
            		case 29:
            		case 60:
            			{
            				alt5=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 1;


            		    goto ruleassignmentStatementEx;

            		}

            	}
                break;
            case STRING:
            	{
            		alt5=1;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruleassignmentStatementEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:97:4: outParameters '=' expression
        	    {
        	        FOLLOWPUSH(FOLLOW_outParameters_in_assignmentStatement274);
        	        outParameters12=outParameters(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->addOutputs(outParameters12
        	            ); 
        	        }


        	         MATCHT(25, &FOLLOW_25_in_assignmentStatement284);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setDefintion(true); 
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_assignmentStatement295);
        	        expression13=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setExpression(expression13
        	            );
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:100:17: id1= ID '=' selectExpr
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_assignmentStatement322);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	         MATCHT(25, &FOLLOW_25_in_assignmentStatement324);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setOutId(new IDNode((char *)((id1->getText(id1))->chars)));
        	        }


        	        FOLLOWPUSH(FOLLOW_selectExpr_in_assignmentStatement349);
        	        selectExpr14=selectExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setExpression(selectExpr14
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleassignmentStatementEx; /* Prevent compiler warnings */
    ruleassignmentStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end assignmentStatement */

/**
 * $ANTLR start outParameters
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:104:1: outParameters returns [ OutParametersNode *node] : (id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* |id3= STRING (sel3= selector )? (for3= formatPart )? ( ',' id4= ID (sel4= selector )? (for5= formatPart )? )* );
 */
static OutParametersNode *
outParameters(pilwisscriptParser ctx)
{
    OutParametersNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    id3;
    pANTLR3_COMMON_TOKEN    id4;
    Selector * sel1;
    #undef	RETURN_TYPE_sel1
    #define	RETURN_TYPE_sel1 Selector *

    ASTNode * for1;
    #undef	RETURN_TYPE_for1
    #define	RETURN_TYPE_for1 ASTNode *

    Selector * sel2;
    #undef	RETURN_TYPE_sel2
    #define	RETURN_TYPE_sel2 Selector *

    ASTNode * for2;
    #undef	RETURN_TYPE_for2
    #define	RETURN_TYPE_for2 ASTNode *

    Selector * sel3;
    #undef	RETURN_TYPE_sel3
    #define	RETURN_TYPE_sel3 Selector *

    ASTNode * for3;
    #undef	RETURN_TYPE_for3
    #define	RETURN_TYPE_for3 ASTNode *

    Selector * sel4;
    #undef	RETURN_TYPE_sel4
    #define	RETURN_TYPE_sel4 Selector *

    ASTNode * for5;
    #undef	RETURN_TYPE_for5
    #define	RETURN_TYPE_for5 ASTNode *

    /* Initialize rule variables
     */


    	node= new OutParametersNode();

    id1       = NULL;
    id2       = NULL;
    id3       = NULL;
    id4       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:108:2: (id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* |id3= STRING (sel3= selector )? (for3= formatPart )? ( ',' id4= ID (sel4= selector )? (for5= formatPart )? )* )

            ANTLR3_UINT32 alt16;

            alt16=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt16=1;
            	}
                break;
            case STRING:
            	{
            		alt16=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto ruleoutParametersEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:108:4: id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters377);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoutParametersEx;
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:108:11: (sel1= selector )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case 29:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:108:12: sel1= selector
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters382);
        	        	        sel1=selector(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        {
        	        	             node->addSelector((char *)((id1->getText(id1))->chars),
        	        	            sel1
        	        	            );
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        {
        	             node->addResult(new IDNode((char *)((id1->getText(id1))->chars))); 
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:110:3: (for1= formatPart )?
        	        {
        	            int alt7=2;
        	            switch ( LA(1) )
        	            {
        	                case 60:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:110:4: for1= formatPart
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters415);
        	        	        for1=formatPart(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        {
        	        	             node->addSpecifier((char *)((id1->getText(id1))->chars), 
        	        	            for1
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:111:2: ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*

        	        for (;;)
        	        {
        	            int alt10=2;
        	            switch ( LA(1) )
        	            {
        	            case 18:
        	            	{
        	            		alt10=1;
        	            	}
        	                break;

        	            }

        	            switch (alt10)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:111:3: ',' id2= ID (sel2= selector )? (for2= formatPart )?
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_outParameters428);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters432);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:111:14: (sel2= selector )?
        	        	        {
        	        	            int alt8=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case 29:
        	        	                	{
        	        	                		alt8=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt8)
        	        	            {
        	        	        	case 1:
        	        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:111:15: sel2= selector
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters437);
        	        	        	        sel2=selector(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleoutParametersEx;
        	        	        	        }


        	        	        	        {
        	        	        	             node->addSelector((char *)((id2->getText(id2))->chars), 
        	        	        	            sel2
        	        	        	            );
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        {
        	        	             node->addResult(new IDNode((char *)((id2->getText(id2))->chars))); 
        	        	        }


        	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:113:3: (for2= formatPart )?
        	        	        {
        	        	            int alt9=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case 60:
        	        	                	{
        	        	                		alt9=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt9)
        	        	            {
        	        	        	case 1:
        	        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:113:4: for2= formatPart
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters469);
        	        	        	        for2=formatPart(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleoutParametersEx;
        	        	        	        }


        	        	        	        {
        	        	        	             node->addSpecifier((char *)((id2->getText(id2))->chars), 
        	        	        	            for2
        	        	        	            ); 
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop10;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop10: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:115:5: id3= STRING (sel3= selector )? (for3= formatPart )? ( ',' id4= ID (sel4= selector )? (for5= formatPart )? )*
        	    {
        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_outParameters491);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoutParametersEx;
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:115:16: (sel3= selector )?
        	        {
        	            int alt11=2;
        	            switch ( LA(1) )
        	            {
        	                case 29:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt11)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:115:17: sel3= selector
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters496);
        	        	        sel3=selector(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        {
        	        	             node->addSelector((char *)((id3->getText(id3))->chars),
        	        	            sel3
        	        	            );
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        {
        	             node->addResult(new IDNode((char *)((id3->getText(id3))->chars))); 
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:117:3: (for3= formatPart )?
        	        {
        	            int alt12=2;
        	            switch ( LA(1) )
        	            {
        	                case 60:
        	                	{
        	                		alt12=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt12)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:117:4: for3= formatPart
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters528);
        	        	        for3=formatPart(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        {
        	        	             node->addSpecifier((char *)((id3->getText(id3))->chars), 
        	        	            for3
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:118:2: ( ',' id4= ID (sel4= selector )? (for5= formatPart )? )*

        	        for (;;)
        	        {
        	            int alt15=2;
        	            switch ( LA(1) )
        	            {
        	            case 18:
        	            	{
        	            		alt15=1;
        	            	}
        	                break;

        	            }

        	            switch (alt15)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:118:3: ',' id4= ID (sel4= selector )? (for5= formatPart )?
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_outParameters541);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters545);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoutParametersEx;
        	        	        }


        	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:118:14: (sel4= selector )?
        	        	        {
        	        	            int alt13=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case 29:
        	        	                	{
        	        	                		alt13=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt13)
        	        	            {
        	        	        	case 1:
        	        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:118:15: sel4= selector
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters550);
        	        	        	        sel4=selector(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleoutParametersEx;
        	        	        	        }


        	        	        	        {
        	        	        	             node->addSelector((char *)((id4->getText(id4))->chars), 
        	        	        	            sel4
        	        	        	            );
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        {
        	        	             node->addResult(new IDNode((char *)((id4->getText(id4))->chars))); 
        	        	        }


        	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:120:3: (for5= formatPart )?
        	        	        {
        	        	            int alt14=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case 60:
        	        	                	{
        	        	                		alt14=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt14)
        	        	            {
        	        	        	case 1:
        	        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:120:4: for5= formatPart
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters582);
        	        	        	        for5=formatPart(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleoutParametersEx;
        	        	        	        }


        	        	        	        {
        	        	        	             node->addSpecifier((char *)((id4->getText(id4))->chars), 
        	        	        	            for5
        	        	        	            ); 
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop15;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop15: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleoutParametersEx; /* Prevent compiler warnings */
    ruleoutParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end outParameters */

/**
 * $ANTLR start actualParameters
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:125:1: actualParameters returns [ ParametersNode *node] : expr1= expression ( ',' expr2= expression )* ;
 */
static ParametersNode *
actualParameters(pilwisscriptParser ctx)
{
    ParametersNode * node;


    ExpressionNode * expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 ExpressionNode *

    ExpressionNode * expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ParametersNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:129:2: (expr1= expression ( ',' expr2= expression )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:129:4: expr1= expression ( ',' expr2= expression )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_actualParameters625);
            expr1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParametersEx;
            }


            {
                 node->addChild(expr1
                ); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:130:3: ( ',' expr2= expression )*

            for (;;)
            {
                int alt17=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:131:3: ',' expr2= expression
            	    {
            	         MATCHT(18, &FOLLOW_18_in_actualParameters639);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_actualParameters648);
            	        expr2=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        {
            	             node->addChild(expr2
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleactualParametersEx; /* Prevent compiler warnings */
    ruleactualParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end actualParameters */

/**
 * $ANTLR start term
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:136:1: term returns [ TermNode *node] : ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters ) ')' |id4= ID '(' ')' |id2= ID (id3= selector )+ |id2= ID );
 */
static TermNode *
term(pilwisscriptParser ctx)
{
    TermNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    INT16;
    pANTLR3_COMMON_TOKEN    FLOAT17;
    pANTLR3_COMMON_TOKEN    STRING18;
    Selector * id3;
    #undef	RETURN_TYPE_id3
    #define	RETURN_TYPE_id3 Selector *

    ExpressionNode * expression15;
    #undef	RETURN_TYPE_expression15
    #define	RETURN_TYPE_expression15 ExpressionNode *

    ParametersNode * actualParameters19;
    #undef	RETURN_TYPE_actualParameters19
    #define	RETURN_TYPE_actualParameters19 ParametersNode *

    /* Initialize rule variables
     */


    	node = new TermNode();

    id1       = NULL;
    id4       = NULL;
    id2       = NULL;
    INT16       = NULL;
    FLOAT17       = NULL;
    STRING18       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:140:2: ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters ) ')' |id4= ID '(' ')' |id2= ID (id3= selector )+ |id2= ID )

            ANTLR3_UINT32 alt19;

            alt19=8;

            switch ( LA(1) )
            {
            case 14:
            	{
            		alt19=1;
            	}
                break;
            case INT:
            	{
            		alt19=2;
            	}
                break;
            case FLOAT:
            	{
            		alt19=3;
            	}
                break;
            case STRING:
            	{
            		alt19=4;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case FLOAT:
            				case ID:
            				case INT:
            				case STRING:
            				case 14:
            				case 17:
            				case 19:
            				case 47:
            					{
            						alt19=5;
            					}
            				    break;
            				case 15:
            					{
            						alt19=6;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 19;
            				    EXCEPTION->state        = 6;


            				    goto ruletermEx;

            				}

            			}
            		    break;
            		case 29:
            			{
            				alt19=7;
            			}
            		    break;
            		case EOF:
            		case EOL:
            		case ID:
            		case STRING:
            		case 13:
            		case 15:
            		case 16:
            		case 17:
            		case 18:
            		case 19:
            		case 20:
            		case 21:
            		case 22:
            		case 23:
            		case 24:
            		case 26:
            		case 27:
            		case 28:
            		case 31:
            		case 32:
            		case 33:
            		case 34:
            		case 35:
            		case 36:
            		case 37:
            		case 40:
            		case 42:
            		case 46:
            		case 48:
            		case 55:
            		case 58:
            		case 59:
            			{
            				alt19=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 19;
            		    EXCEPTION->state        = 5;


            		    goto ruletermEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:140:4: '(' expression ')'
        	    {
        	         MATCHT(14, &FOLLOW_14_in_term678);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_term680);
        	        expression15=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term682);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setExpression(expression15
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:141:4: INT
        	    {
        	        INT16 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_term693);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((INT16->getText(INT16))->chars)); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:142:4: FLOAT
        	    {
        	        FLOAT17 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_term705);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((FLOAT17->getText(FLOAT17))->chars)); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:143:4: STRING
        	    {
        	        STRING18 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_term717);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setString((char *)((STRING18->getText(STRING18))->chars)); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:144:4: id1= ID '(' ( actualParameters ) ')'
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term733);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term735);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id1->getText(id1))->chars))); 
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:145:3: ( actualParameters )
        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:145:4: actualParameters
        	        {
        	            FOLLOWPUSH(FOLLOW_actualParameters_in_term747);
        	            actualParameters19=actualParameters(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruletermEx;
        	            }


        	            {
        	                 node->setParameters(actualParameters19
        	                ); 
        	            }


        	        }


        	         MATCHT(15, &FOLLOW_15_in_term758);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:147:4: id4= ID '(' ')'
        	    {
        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term767);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term769);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id4->getText(id4))->chars))); 
        	        }


        	        {
        	             node->setParameters(); 
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term791);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:150:4: id2= ID (id3= selector )+
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term809);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:151:3: (id3= selector )+
        	        {
        	            int cnt18=0;

        	            for (;;)
        	            {
        	                int alt18=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case 29:
        	        		{
        	        			alt18=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt18)
        	        	{
        	        	    case 1:
        	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:151:4: id3= selector
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_selector_in_term823);
        	        	            id3=selector(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruletermEx;
        	        	            }


        	        	            {
        	        	                node->addSelector(id3
        	        	                );
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt18 >= 1 )
        	        		{
        	        		    goto loop18;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruletermEx;
        	        	}
        	        	cnt18++;
        	            }
        	            loop18: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 8:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:152:4: id2= ID
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term840);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end term */

/**
 * $ANTLR start selector
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:155:1: selector returns [ Selector *node] : ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' );
 */
static Selector *
selector(pilwisscriptParser ctx)
{
    Selector * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    id3;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    id5;
    pANTLR3_COMMON_TOKEN    INT20;

    /* Initialize rule variables
     */


    	node = new Selector("selector");

    id1       = NULL;
    id2       = NULL;
    id3       = NULL;
    id4       = NULL;
    id5       = NULL;
    INT20       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:159:2: ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' )

            ANTLR3_UINT32 alt23;

            alt23=6;

            switch ( LA(1) )
            {
            case 29:
            	{
            		switch ( LA(2) )
            		{
            		case INT:
            			{
            				switch ( LA(3) )
            				{
            				case INT:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								alt23=1;
            							}
            						    break;
            						case 30:
            							{
            								alt23=5;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 23;
            						    EXCEPTION->state        = 4;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 30:
            					{
            						alt23=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 23;
            				    EXCEPTION->state        = 2;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;
            		case ID:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case INT:
            									{
            										alt23=6;
            									}
            								    break;
            								case 44:
            									{
            										alt23=4;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 23;
            								    EXCEPTION->state        = 10;


            								    goto ruleselectorEx;

            								}

            							}
            						    break;
            						case 30:
            							{
            								alt23=4;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 23;
            						    EXCEPTION->state        = 6;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 18:
            				case 30:
            					{
            						alt23=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 23;
            				    EXCEPTION->state        = 3;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 23;
            		    EXCEPTION->state        = 1;


            		    goto ruleselectorEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 23;
                EXCEPTION->state        = 0;


                goto ruleselectorEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:159:4: '[' id1= INT id2= INT ',' id3= INT id4= INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector866);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector870);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector874);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector876);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector880);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector884);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector886);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("box"); node->setBounds((char *)((id1->getText(id1))->chars),
        	            									(char *)((id2->getText(id2))->chars),
        	            									(char *)((id3->getText(id3))->chars),
        	            									(char *)((id4->getText(id4))->chars)); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:163:4: '[' id1= ID ( ',' 'key=' id2= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector894);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector898);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:163:15: ( ',' 'key=' id2= ID )?
        	        {
        	            int alt20=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt20=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:163:16: ',' 'key=' id2= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector901);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(44, &FOLLOW_44_in_selector903);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector907);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector912);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("var"); 
        	            								node->setVariable((char *)((id1->getText(id1))->chars));
        	            								if ( id2 != 0) node->keyColumns((char *)(id2->getText(id2))->chars);
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:166:4: '[' INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector921);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        INT20 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector923);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector925);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("index"); node->setVariable((char *)((INT20->getText(INT20))->chars));
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:167:4: '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector937);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector941);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector946);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:167:23: ( ',' 'key=' id3= ID )?
        	        {
        	            int alt21=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:167:24: ',' 'key=' id3= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector949);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(44, &FOLLOW_44_in_selector950);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector954);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector958);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								if ( id3 != 0) node->keyColumns((char *)(id3->getText(id3))->chars);
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:171:4: '[' id1= INT id2= INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector967);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector971);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector976);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector978);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("recordrange"); 
        	            								node->beginRec((char *)(id1->getText(id1))->chars); 
        	            								node->endRec((char *)(id2->getText(id2))->chars); 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:174:4: '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector988);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector992);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector996);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector998);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1002);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1006);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:174:42: ( ',' 'key=' id5= ID )?
        	        {
        	            int alt22=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22)
        	            {
        	        	case 1:
        	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:174:43: ',' 'key=' id5= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector1009);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(44, &FOLLOW_44_in_selector1011);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id5 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1015);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector1020);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrecordrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								node->beginRec((char *)(id3->getText(id3))->chars); 
        	            								node->endRec((char *)(id4->getText(id4))->chars);
        	            								if ( id5 != 0) node->keyColumns((char *)(id5->getText(id5))->chars);
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleselectorEx; /* Prevent compiler warnings */
    ruleselectorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end selector */

/**
 * $ANTLR start negation
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:182:1: negation returns [ TermNode *node] : ( 'not' )* term ;
 */
static TermNode *
negation(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * term21;
    #undef	RETURN_TYPE_term21
    #define	RETURN_TYPE_term21 TermNode *

    /* Initialize rule variables
     */


    	bool negated = false;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:186:2: ( ( 'not' )* term )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:186:4: ( 'not' )* term
        {
            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:186:4: ( 'not' )*

            for (;;)
            {
                int alt24=2;
                switch ( LA(1) )
                {
                case 47:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:186:5: 'not'
            	    {
            	         MATCHT(47, &FOLLOW_47_in_negation1045);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenegationEx;
            	        }


            	        {
            	             negated = !negated; 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            FOLLOWPUSH(FOLLOW_term_in_negation1061);
            term21=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenegationEx;
            }


            {
                 term21
                ->setLogicalNegation(negated); node = term21
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenegationEx; /* Prevent compiler warnings */
    rulenegationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end negation */

/**
 * $ANTLR start unary
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:191:1: unary returns [ TermNode *node] : ( '+' | '-' )? negation ;
 */
static TermNode *
unary(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * negation22;
    #undef	RETURN_TYPE_negation22
    #define	RETURN_TYPE_negation22 TermNode *

    /* Initialize rule variables
     */


    	bool isnegated = false;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:196:2: ( ( '+' | '-' )? negation )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:196:4: ( '+' | '-' )? negation
        {
            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:196:4: ( '+' | '-' )?
            {
                int alt25=3;
                switch ( LA(1) )
                {
                    case 17:
                    	{
                    		alt25=1;
                    	}
                        break;
                    case 19:
                    	{
                    		alt25=2;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:196:5: '+'
            	    {
            	         MATCHT(17, &FOLLOW_17_in_unary1089);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:197:5: '-'
            	    {
            	         MATCHT(19, &FOLLOW_19_in_unary1101);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	        {
            	             isnegated = !isnegated; 
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_negation_in_unary1117);
            negation22=negation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunaryEx;
            }


            {
                 negation22
                ->setNumericalNegation(isnegated); node = negation22
                ; 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunaryEx; /* Prevent compiler warnings */
    ruleunaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end unary */

/**
 * $ANTLR start mult
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:201:1: mult returns [ MultiplicationNode *node] : un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* ;
 */
static MultiplicationNode *
mult(pilwisscriptParser ctx)
{
    MultiplicationNode * node;


    TermNode * un1;
    #undef	RETURN_TYPE_un1
    #define	RETURN_TYPE_un1 TermNode *

    TermNode * un2;
    #undef	RETURN_TYPE_un2
    #define	RETURN_TYPE_un2 TermNode *

    /* Initialize rule variables
     */


    	node = new MultiplicationNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:206:2: (un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:206:4: un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )*
        {
            FOLLOWPUSH(FOLLOW_unary_in_mult1143);
            un1=unary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultEx;
            }


            {
                 node->setLeftTerm(un1); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:207:3: ( ( '*' | '/' | 'mod' ) un2= unary )*

            for (;;)
            {
                int alt27=2;
                switch ( LA(1) )
                {
                case 16:
                case 21:
                case 46:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:208:3: ( '*' | '/' | 'mod' ) un2= unary
            	    {
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:208:3: ( '*' | '/' | 'mod' )
            	        {
            	            int alt26=3;
            	            switch ( LA(1) )
            	            {
            	            case 16:
            	            	{
            	            		alt26=1;
            	            	}
            	                break;
            	            case 21:
            	            	{
            	            		alt26=2;
            	            	}
            	                break;
            	            case 46:
            	            	{
            	            		alt26=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 26;
            	                EXCEPTION->state        = 0;


            	                goto rulemultEx;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:208:4: '*'
            	        	    {
            	        	         MATCHT(16, &FOLLOW_16_in_mult1158);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oTIMES; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:209:5: '/'
            	        	    {
            	        	         MATCHT(21, &FOLLOW_21_in_mult1171);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oDIVIDED; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:210:5: 'mod'
            	        	    {
            	        	         MATCHT(46, &FOLLOW_46_in_mult1183);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oMOD; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_in_mult1200);
            	        un2=unary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultEx;
            	        }


            	        {
            	             node->addRightTerm(op, un2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemultEx; /* Prevent compiler warnings */
    rulemultEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end mult */

/**
 * $ANTLR start add
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:216:1: add returns [ AddNode *node] : mul1= mult ( ( '+' | '-' ) mul2= mult )* ;
 */
static AddNode *
add(pilwisscriptParser ctx)
{
    AddNode * node;


    MultiplicationNode * mul1;
    #undef	RETURN_TYPE_mul1
    #define	RETURN_TYPE_mul1 MultiplicationNode *

    MultiplicationNode * mul2;
    #undef	RETURN_TYPE_mul2
    #define	RETURN_TYPE_mul2 MultiplicationNode *

    /* Initialize rule variables
     */


    	node = new AddNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:221:2: (mul1= mult ( ( '+' | '-' ) mul2= mult )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:221:4: mul1= mult ( ( '+' | '-' ) mul2= mult )*
        {
            FOLLOWPUSH(FOLLOW_mult_in_add1235);
            mul1=mult(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaddEx;
            }


            {
                 node->setLeftTerm(mul1); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:222:3: ( ( '+' | '-' ) mul2= mult )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) )
                {
                case 17:
                case 19:
                	{
                		alt29=1;
                	}
                    break;

                }

                switch (alt29)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:223:3: ( '+' | '-' ) mul2= mult
            	    {
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:223:3: ( '+' | '-' )
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	            case 17:
            	            	{
            	            		alt28=1;
            	            	}
            	                break;
            	            case 19:
            	            	{
            	            		alt28=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 28;
            	                EXCEPTION->state        = 0;


            	                goto ruleaddEx;

            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:223:4: '+'
            	        	    {
            	        	         MATCHT(17, &FOLLOW_17_in_add1250);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oADD; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:225:3: '-'
            	        	    {
            	        	         MATCHT(19, &FOLLOW_19_in_add1266);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oSUBSTRACT; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_mult_in_add1286);
            	        mul2=mult(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaddEx;
            	        }


            	        {
            	             node->addRightTerm(op, mul2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleaddEx; /* Prevent compiler warnings */
    ruleaddEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end add */

/**
 * $ANTLR start relation
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:231:1: relation returns [ RelationNode *node] : add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* ;
 */
static RelationNode *
relation(pilwisscriptParser ctx)
{
    RelationNode * node;


    AddNode * add1;
    #undef	RETURN_TYPE_add1
    #define	RETURN_TYPE_add1 AddNode *

    AddNode * add2;
    #undef	RETURN_TYPE_add2
    #define	RETURN_TYPE_add2 AddNode *

    /* Initialize rule variables
     */


    	node = new RelationNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:236:2: (add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:236:4: add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*
        {
            FOLLOWPUSH(FOLLOW_add_in_relation1319);
            add1=add(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }


            {
                 node->setLeftTerm(add1); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:237:3: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) )
                {
                case 13:
                case 23:
                case 24:
                case 26:
                case 27:
                case 28:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:238:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add
            	    {
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:238:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' )
            	        {
            	            int alt30=6;
            	            switch ( LA(1) )
            	            {
            	            case 26:
            	            	{
            	            		alt30=1;
            	            	}
            	                break;
            	            case 13:
            	            	{
            	            		alt30=2;
            	            	}
            	                break;
            	            case 23:
            	            	{
            	            		alt30=3;
            	            	}
            	                break;
            	            case 24:
            	            	{
            	            		alt30=4;
            	            	}
            	                break;
            	            case 28:
            	            	{
            	            		alt30=5;
            	            	}
            	                break;
            	            case 27:
            	            	{
            	            		alt30=6;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 30;
            	                EXCEPTION->state        = 0;


            	                goto rulerelationEx;

            	            }

            	            switch (alt30)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:239:3: '=='
            	        	    {
            	        	         MATCHT(26, &FOLLOW_26_in_relation1337);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:240:5: '!='
            	        	    {
            	        	         MATCHT(13, &FOLLOW_13_in_relation1351);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oNEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:241:5: '<'
            	        	    {
            	        	         MATCHT(23, &FOLLOW_23_in_relation1365);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oLESS; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:242:5: '<='
            	        	    {
            	        	         MATCHT(24, &FOLLOW_24_in_relation1379);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oLESSEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:243:5: '>='
            	        	    {
            	        	         MATCHT(28, &FOLLOW_28_in_relation1393);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oGREATEREQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:244:5: '>'
            	        	    {
            	        	         MATCHT(27, &FOLLOW_27_in_relation1407);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oGREATER; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_add_in_relation1425);
            	        add2=add(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }


            	        {
            	             node->addRightTerm(op, add2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end relation */

/**
 * $ANTLR start expression
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:250:1: expression returns [ ExpressionNode *node] : rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* ;
 */
static ExpressionNode *
expression(pilwisscriptParser ctx)
{
    ExpressionNode * node;


    RelationNode * rel1;
    #undef	RETURN_TYPE_rel1
    #define	RETURN_TYPE_rel1 RelationNode *

    RelationNode * rel2;
    #undef	RETURN_TYPE_rel2
    #define	RETURN_TYPE_rel2 RelationNode *

    /* Initialize rule variables
     */


    	node = new ExpressionNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:255:2: (rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:255:4: rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )*
        {
            FOLLOWPUSH(FOLLOW_relation_in_expression1459);
            rel1=relation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }


            {
                 node->setLeftTerm(rel1); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:256:3: ( ( 'and' | 'or' | 'xor' ) rel2= relation )*

            for (;;)
            {
                int alt33=2;
                switch ( LA(1) )
                {
                case 31:
                case 48:
                case 59:
                	{
                		alt33=1;
                	}
                    break;

                }

                switch (alt33)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:257:3: ( 'and' | 'or' | 'xor' ) rel2= relation
            	    {
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:257:3: ( 'and' | 'or' | 'xor' )
            	        {
            	            int alt32=3;
            	            switch ( LA(1) )
            	            {
            	            case 31:
            	            	{
            	            		alt32=1;
            	            	}
            	                break;
            	            case 48:
            	            	{
            	            		alt32=2;
            	            	}
            	                break;
            	            case 59:
            	            	{
            	            		alt32=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 32;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpressionEx;

            	            }

            	            switch (alt32)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:257:5: 'and'
            	        	    {
            	        	         MATCHT(31, &FOLLOW_31_in_expression1479);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oAND; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:258:5: 'or'
            	        	    {
            	        	         MATCHT(48, &FOLLOW_48_in_expression1493);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oOR; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:259:5: 'xor'
            	        	    {
            	        	         MATCHT(59, &FOLLOW_59_in_expression1507);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oXOR; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_relation_in_expression1524);
            	        rel2=relation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	        {
            	             node->addRightTerm(op, rel2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end expression */

/**
 * $ANTLR start commandStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:264:1: commandStatement returns [ CommandNode *node] : id1= ID ( '--' id2= ID ( '=' expression )? )* ;
 */
static CommandNode *
commandStatement(pilwisscriptParser ctx)
{
    CommandNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    ExpressionNode * expression23;
    #undef	RETURN_TYPE_expression23
    #define	RETURN_TYPE_expression23 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new CommandNode();
    	QString flag;
    	ExpressionNode *expr;

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:270:2: (id1= ID ( '--' id2= ID ( '=' expression )? )* )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:271:2: id1= ID ( '--' id2= ID ( '=' expression )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1561);
            if  (HASEXCEPTION())
            {
                goto rulecommandStatementEx;
            }


            {
                 node->setCommand((char *)((id1->getText(id1))->chars)); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:272:2: ( '--' id2= ID ( '=' expression )? )*

            for (;;)
            {
                int alt35=2;
                switch ( LA(1) )
                {
                case 20:
                	{
                		alt35=1;
                	}
                    break;

                }

                switch (alt35)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:273:2: '--' id2= ID ( '=' expression )?
            	    {
            	         MATCHT(20, &FOLLOW_20_in_commandStatement1580);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1588);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        {
            	             flag = QString((char *)((id2->getText(id2))->chars));
            	        }


            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:275:2: ( '=' expression )?
            	        {
            	            int alt34=2;
            	            switch ( LA(1) )
            	            {
            	                case 25:
            	                	{
            	                		alt34=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt34)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:275:3: '=' expression
            	        	    {
            	        	         MATCHT(25, &FOLLOW_25_in_commandStatement1599);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_expression_in_commandStatement1602);
            	        	        expression23=expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        {
            	        	             expr = expression23
            	        	            ; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addOption(flag, expr); expr = 0;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecommandStatementEx; /* Prevent compiler warnings */
    rulecommandStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end commandStatement */

/**
 * $ANTLR start functionStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:281:1: functionStatement returns [ FunctionStatementNode *node] : ID '(' ( actualParameters )? ')' ;
 */
static FunctionStatementNode *
functionStatement(pilwisscriptParser ctx)
{
    FunctionStatementNode * node;


    pANTLR3_COMMON_TOKEN    ID24;
    ParametersNode * actualParameters25;
    #undef	RETURN_TYPE_actualParameters25
    #define	RETURN_TYPE_actualParameters25 ParametersNode *

    /* Initialize rule variables
     */

    ID24       = NULL;

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:282:2: ( ID '(' ( actualParameters )? ')' )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:282:4: ID '(' ( actualParameters )? ')'
        {
            ID24 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_functionStatement1641);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            {
                 node = new FunctionStatementNode((char *)((ID24->getText(ID24))->chars)); 
            }


             MATCHT(14, &FOLLOW_14_in_functionStatement1651);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:283:6: ( actualParameters )?
            {
                int alt36=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 47:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:283:6: actualParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParameters_in_functionStatement1653);
            	        actualParameters25=actualParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->setParameters(actualParameters25
                ); 
            }


             MATCHT(15, &FOLLOW_15_in_functionStatement1663);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionStatementEx; /* Prevent compiler warnings */
    rulefunctionStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end functionStatement */

/**
 * $ANTLR start whileStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:287:1: whileStatement returns [ WhileNode *node] : 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' ;
 */
static WhileNode *
whileStatement(pilwisscriptParser ctx)
{
    WhileNode * node;


    ExpressionNode * expression26;
    #undef	RETURN_TYPE_expression26
    #define	RETURN_TYPE_expression26 ExpressionNode *

    ASTNode * statement27;
    #undef	RETURN_TYPE_statement27
    #define	RETURN_TYPE_statement27 ASTNode *

    BreakNode * breakStatement28;
    #undef	RETURN_TYPE_breakStatement28
    #define	RETURN_TYPE_breakStatement28 BreakNode *

    /* Initialize rule variables
     */


    	node = new WhileNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:291:2: ( 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:291:4: 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile'
        {
             MATCHT(58, &FOLLOW_58_in_whileStatement1685);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1687);
            expression26=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


             MATCHT(34, &FOLLOW_34_in_whileStatement1689);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:291:28: ( EOL )*

            for (;;)
            {
                int alt37=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:291:29: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1692);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


            {
                 node->setCondition(expression26
                ); 
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:292:3: ( ( statement | breakStatement ) ( EOL )* )*

            for (;;)
            {
                int alt40=2;
                switch ( LA(1) )
                {
                case ID:
                case STRING:
                case 32:
                case 33:
                case 40:
                case 42:
                case 58:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:292:5: ( statement | breakStatement ) ( EOL )*
            	    {
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:292:5: ( statement | breakStatement )
            	        {
            	            int alt38=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            case STRING:
            	            case 33:
            	            case 40:
            	            case 42:
            	            case 58:
            	            	{
            	            		alt38=1;
            	            	}
            	                break;
            	            case 32:
            	            	{
            	            		alt38=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 38;
            	                EXCEPTION->state        = 0;


            	                goto rulewhileStatementEx;

            	            }

            	            switch (alt38)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:292:6: statement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_statement_in_whileStatement1703);
            	        	        statement27=statement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(statement27
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:294:3: breakStatement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_breakStatement_in_whileStatement1721);
            	        	        breakStatement28=breakStatement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(breakStatement28
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:295:5: ( EOL )*

            	        for (;;)
            	        {
            	            int alt39=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt39=1;
            	            	}
            	                break;

            	            }

            	            switch (alt39)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:295:6: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1734);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop39;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop39: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


             MATCHT(37, &FOLLOW_37_in_whileStatement1747);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end whileStatement */

/**
 * $ANTLR start breakStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:300:1: breakStatement returns [ BreakNode *node] : 'break' 'when' expression ;
 */
static BreakNode *
breakStatement(pilwisscriptParser ctx)
{
    BreakNode * node;


    ExpressionNode * expression29;
    #undef	RETURN_TYPE_expression29
    #define	RETURN_TYPE_expression29 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new BreakNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:304:2: ( 'break' 'when' expression )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:304:4: 'break' 'when' expression
        {
             MATCHT(32, &FOLLOW_32_in_breakStatement1768);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


             MATCHT(56, &FOLLOW_56_in_breakStatement1770);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_breakStatement1772);
            expression29=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            {
                 node->addChild(expression29
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end breakStatement */

/**
 * $ANTLR start formatPart
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:307:1: formatPart returns [ ASTNode *node] : '{' formatters '}' ;
 */
static ASTNode *
formatPart(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * formatters30;
    #undef	RETURN_TYPE_formatters30
    #define	RETURN_TYPE_formatters30 ASTNode *

    /* Initialize rule variables
     */

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:309:2: ( '{' formatters '}' )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:309:4: '{' formatters '}'
        {
             MATCHT(60, &FOLLOW_60_in_formatPart1794);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            FOLLOWPUSH(FOLLOW_formatters_in_formatPart1796);
            formatters30=formatters(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


             MATCHT(61, &FOLLOW_61_in_formatPart1798);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            {
                 node=formatters30
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleformatPartEx; /* Prevent compiler warnings */
    ruleformatPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatPart */

/**
 * $ANTLR start formatters
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:312:1: formatters returns [ ASTNode *node ] : ( dataFormatter | domainFormatter | domainFormatter ';' dataFormatter | dataFormatter ';' domainFormatter );
 */
static ASTNode *
formatters(pilwisscriptParser ctx)
{
    ASTNode * node;


    Formatter * dataFormatter31;
    #undef	RETURN_TYPE_dataFormatter31
    #define	RETURN_TYPE_dataFormatter31 Formatter *

    DomainFormatter * domainFormatter32;
    #undef	RETURN_TYPE_domainFormatter32
    #define	RETURN_TYPE_domainFormatter32 DomainFormatter *

    DomainFormatter * domainFormatter33;
    #undef	RETURN_TYPE_domainFormatter33
    #define	RETURN_TYPE_domainFormatter33 DomainFormatter *

    Formatter * dataFormatter34;
    #undef	RETURN_TYPE_dataFormatter34
    #define	RETURN_TYPE_dataFormatter34 Formatter *

    DomainFormatter * domainFormatter35;
    #undef	RETURN_TYPE_domainFormatter35
    #define	RETURN_TYPE_domainFormatter35 DomainFormatter *

    Formatter * dataFormatter36;
    #undef	RETURN_TYPE_dataFormatter36
    #define	RETURN_TYPE_dataFormatter36 Formatter *

    /* Initialize rule variables
     */


    	node = new ASTNode("Formatters");

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:316:2: ( dataFormatter | domainFormatter | domainFormatter ';' dataFormatter | dataFormatter ';' domainFormatter )

            ANTLR3_UINT32 alt41;

            alt41=4;

            switch ( LA(1) )
            {
            case 40:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 18:
            											{
            												switch ( LA(7) )
            												{
            												case 51:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 20;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 50:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 21;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 45:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 22;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 49:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 23;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 39:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 24;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 38:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 25;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;
            												case 54:
            													{
            														switch ( LA(8) )
            														{
            														case 15:
            															{
            																switch ( LA(9) )
            																{
            																case 61:
            																	{
            																		alt41=1;
            																	}
            																    break;
            																case 22:
            																	{
            																		alt41=4;
            																	}
            																    break;

            																default:
            																    CONSTRUCTEX();
            																    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            																    EXCEPTION->message      = (void *)"";
            																    EXCEPTION->decisionNum  = 41;
            																    EXCEPTION->state        = 27;


            																    goto ruleformattersEx;

            																}

            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 41;
            														    EXCEPTION->state        = 26;


            														    goto ruleformattersEx;

            														}

            													}
            												    break;

            												default:
            												    CONSTRUCTEX();
            												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            												    EXCEPTION->message      = (void *)"";
            												    EXCEPTION->decisionNum  = 41;
            												    EXCEPTION->state        = 18;


            												    goto ruleformattersEx;

            												}

            											}
            										    break;
            										case 15:
            											{
            												switch ( LA(7) )
            												{
            												case 61:
            													{
            														alt41=1;
            													}
            												    break;
            												case 22:
            													{
            														alt41=4;
            													}
            												    break;

            												default:
            												    CONSTRUCTEX();
            												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            												    EXCEPTION->message      = (void *)"";
            												    EXCEPTION->decisionNum  = 41;
            												    EXCEPTION->state        = 19;


            												    goto ruleformattersEx;

            												}

            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 41;
            										    EXCEPTION->state        = 13;


            										    goto ruleformattersEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 41;
            								    EXCEPTION->state        = 9;


            								    goto ruleformattersEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 41;
            						    EXCEPTION->state        = 5;


            						    goto ruleformattersEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( LA(4) )
            						{
            						case 15:
            							{
            								switch ( LA(5) )
            								{
            								case 61:
            									{
            										alt41=1;
            									}
            								    break;
            								case 22:
            									{
            										alt41=4;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 41;
            								    EXCEPTION->state        = 10;


            								    goto ruleformattersEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 41;
            						    EXCEPTION->state        = 6;


            						    goto ruleformattersEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 41;
            				    EXCEPTION->state        = 3;


            				    goto ruleformattersEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 41;
            		    EXCEPTION->state        = 1;


            		    goto ruleformattersEx;

            		}

            	}
                break;
            case 52:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case FLOAT:
            					{
            						switch ( LA(4) )
            						{
            						case 15:
            							{
            								switch ( LA(5) )
            								{
            								case 61:
            									{
            										alt41=2;
            									}
            								    break;
            								case 22:
            									{
            										alt41=3;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 41;
            								    EXCEPTION->state        = 11;


            								    goto ruleformattersEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 41;
            						    EXCEPTION->state        = 7;


            						    goto ruleformattersEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( LA(4) )
            						{
            						case 15:
            							{
            								switch ( LA(5) )
            								{
            								case 61:
            									{
            										alt41=2;
            									}
            								    break;
            								case 22:
            									{
            										alt41=3;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 41;
            								    EXCEPTION->state        = 12;


            								    goto ruleformattersEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 41;
            						    EXCEPTION->state        = 8;


            						    goto ruleformattersEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 41;
            				    EXCEPTION->state        = 4;


            				    goto ruleformattersEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 41;
            		    EXCEPTION->state        = 2;


            		    goto ruleformattersEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 41;
                EXCEPTION->state        = 0;


                goto ruleformattersEx;

            }

            switch (alt41)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:316:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatters1821);
        	        dataFormatter31=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(dataFormatter31
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:317:4: domainFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatters1831);
        	        domainFormatter32=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(domainFormatter32
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:318:4: domainFormatter ';' dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatters1840);
        	        domainFormatter33=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatters1842);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatters1844);
        	        dataFormatter34=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(domainFormatter33
        	            ); node->addChild(dataFormatter34
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:319:4: dataFormatter ';' domainFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatters1851);
        	        dataFormatter36=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatters1853);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatters1855);
        	        domainFormatter35=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(domainFormatter35
        	            ); node->addChild(dataFormatter36
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformattersEx; /* Prevent compiler warnings */
    ruleformattersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatters */

/**
 * $ANTLR start formatter
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:322:1: formatter returns [ ASTNode *node] : ( dataFormatter | domainFormatter );
 */
static ASTNode *
formatter(pilwisscriptParser ctx)
{
    ASTNode * node;


    Formatter * dataFormatter37;
    #undef	RETURN_TYPE_dataFormatter37
    #define	RETURN_TYPE_dataFormatter37 Formatter *

    DomainFormatter * domainFormatter38;
    #undef	RETURN_TYPE_domainFormatter38
    #define	RETURN_TYPE_domainFormatter38 DomainFormatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:324:2: ( dataFormatter | domainFormatter )

            ANTLR3_UINT32 alt42;

            alt42=2;

            switch ( LA(1) )
            {
            case 40:
            	{
            		alt42=1;
            	}
                break;
            case 52:
            	{
            		alt42=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 42;
                EXCEPTION->state        = 0;


                goto ruleformatterEx;

            }

            switch (alt42)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:324:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatter1874);
        	        dataFormatter37=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = dataFormatter37
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:325:4: domainFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatter1884);
        	        domainFormatter38=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = domainFormatter38
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformatterEx; /* Prevent compiler warnings */
    ruleformatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatter */

/**
 * $ANTLR start dataFormatter
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:328:1: dataFormatter returns [ Formatter *node] : ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' );
 */
static Formatter *
dataFormatter(pilwisscriptParser ctx)
{
    Formatter * node;


    pANTLR3_COMMON_TOKEN    ID39;
    pANTLR3_COMMON_TOKEN    STRING40;
    pANTLR3_COMMON_TOKEN    ID41;
    pANTLR3_COMMON_TOKEN    STRING42;
    pANTLR3_COMMON_TOKEN    STRING43;
    QString id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 QString

    /* Initialize rule variables
     */


    	node = new Formatter();

    ID39       = NULL;
    STRING40       = NULL;
    ID41       = NULL;
    STRING42       = NULL;
    STRING43       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:332:2: ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' )

            ANTLR3_UINT32 alt43;

            alt43=3;

            switch ( LA(1) )
            {
            case 40:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 18:
            											{
            												alt43=1;
            											}
            										    break;
            										case 15:
            											{
            												alt43=2;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 43;
            										    EXCEPTION->state        = 6;


            										    goto ruledataFormatterEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 43;
            								    EXCEPTION->state        = 5;


            								    goto ruledataFormatterEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 43;
            						    EXCEPTION->state        = 3;


            						    goto ruledataFormatterEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						alt43=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 43;
            				    EXCEPTION->state        = 2;


            				    goto ruledataFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 43;
            		    EXCEPTION->state        = 1;


            		    goto ruledataFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 43;
                EXCEPTION->state        = 0;


                goto ruledataFormatterEx;

            }

            switch (alt43)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:332:4: 'format' '(' ID ',' STRING ',' id1= datatype ')'
        	    {
        	         MATCHT(40, &FOLLOW_40_in_dataFormatter1909);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1911);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID39 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter1913);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1915);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING40 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1917);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1919);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_datatype_in_dataFormatter1923);
        	        id1=datatype(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1925);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setDataType(id1
        	            );
        	            							  node->setFormatNameSpace(new IDNode((char *)((ID39->getText(ID39))->chars)));
        	            							  node->setFormat((char *)((STRING40->getText(STRING40))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:335:4: 'format' '(' ID ',' STRING ')'
        	    {
        	         MATCHT(40, &FOLLOW_40_in_dataFormatter1932);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1934);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID41 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter1936);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1938);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING42 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1940);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1942);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormatNameSpace(new IDNode((char *)((ID41->getText(ID41))->chars)));
        	            							  node->setFormat((char *)((STRING42->getText(STRING42))->chars));
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:337:4: 'format' '(' STRING ')'
        	    {
        	         MATCHT(40, &FOLLOW_40_in_dataFormatter1951);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1953);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING43 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1955);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1957);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormat((char *)((STRING43->getText(STRING43))->chars)); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledataFormatterEx; /* Prevent compiler warnings */
    ruledataFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end dataFormatter */

/**
 * $ANTLR start datatype
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:340:1: datatype returns [ QString typeName] : ( 'rastercoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'featurecoverage' | 'feature-index' | 'table' );
 */
static QString
datatype(pilwisscriptParser ctx)
{
    QString typeName;


    /* Initialize rule variables
     */



    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:343:2: ( 'rastercoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'featurecoverage' | 'feature-index' | 'table' )

            ANTLR3_UINT32 alt44;

            alt44=7;

            switch ( LA(1) )
            {
            case 51:
            	{
            		alt44=1;
            	}
                break;
            case 50:
            	{
            		alt44=2;
            	}
                break;
            case 45:
            	{
            		alt44=3;
            	}
                break;
            case 49:
            	{
            		alt44=4;
            	}
                break;
            case 39:
            	{
            		alt44=5;
            	}
                break;
            case 38:
            	{
            		alt44=6;
            	}
                break;
            case 54:
            	{
            		alt44=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 44;
                EXCEPTION->state        = 0;


                goto ruledatatypeEx;

            }

            switch (alt44)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:343:4: 'rastercoverage'
        	    {
        	         MATCHT(51, &FOLLOW_51_in_datatype1980);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "gridcoverage"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:344:4: 'polygoncoverage'
        	    {
        	         MATCHT(50, &FOLLOW_50_in_datatype1990);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "polygoncoverage"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:345:4: 'linecoverage'
        	    {
        	         MATCHT(45, &FOLLOW_45_in_datatype2000);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "linecoverage";
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:346:4: 'pointcoverage'
        	    {
        	         MATCHT(49, &FOLLOW_49_in_datatype2010);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "pointcoverage"; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:347:4: 'featurecoverage'
        	    {
        	         MATCHT(39, &FOLLOW_39_in_datatype2020);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "featurecoverage";
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:348:4: 'feature-index'
        	    {
        	         MATCHT(38, &FOLLOW_38_in_datatype2055);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "feature-index";
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:349:4: 'table'
        	    {
        	         MATCHT(54, &FOLLOW_54_in_datatype2092);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "table"; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledatatypeEx; /* Prevent compiler warnings */
    ruledatatypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return typeName;
}
/* $ANTLR end datatype */

/**
 * $ANTLR start domainFormatter
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:352:1: domainFormatter returns [ DomainFormatter *node] : ( 'resolution' '(' id1= FLOAT ')' | 'resolution' '(' id1= INT ')' );
 */
static DomainFormatter *
domainFormatter(pilwisscriptParser ctx)
{
    DomainFormatter * node;


    pANTLR3_COMMON_TOKEN    id1;

    /* Initialize rule variables
     */


    	node = new DomainFormatter();

    id1       = NULL;

    {
        {
            //  D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:356:2: ( 'resolution' '(' id1= FLOAT ')' | 'resolution' '(' id1= INT ')' )

            ANTLR3_UINT32 alt45;

            alt45=2;

            switch ( LA(1) )
            {
            case 52:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case FLOAT:
            					{
            						alt45=1;
            					}
            				    break;
            				case INT:
            					{
            						alt45=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 45;
            				    EXCEPTION->state        = 2;


            				    goto ruledomainFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 45;
            		    EXCEPTION->state        = 1;


            		    goto ruledomainFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 45;
                EXCEPTION->state        = 0;


                goto ruledomainFormatterEx;

            }

            switch (alt45)
            {
        	case 1:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:356:4: 'resolution' '(' id1= FLOAT ')'
        	    {
        	         MATCHT(52, &FOLLOW_52_in_domainFormatter2119);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_domainFormatter2121);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_domainFormatter2125);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_domainFormatter2127);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setResolution((char *)((id1->getText(id1))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:357:4: 'resolution' '(' id1= INT ')'
        	    {
        	         MATCHT(52, &FOLLOW_52_in_domainFormatter2134);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_domainFormatter2136);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_domainFormatter2140);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_domainFormatter2142);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setResolution((char *)((id1->getText(id1))->chars));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledomainFormatterEx; /* Prevent compiler warnings */
    ruledomainFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end domainFormatter */

/**
 * $ANTLR start ifStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:360:1: ifStatement returns [ Ifnode *node] : 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' ;
 */
static Ifnode *
ifStatement(pilwisscriptParser ctx)
{
    Ifnode * node;


    ASTNode * result;
    #undef	RETURN_TYPE_result
    #define	RETURN_TYPE_result ASTNode *

    ASTNode * result2;
    #undef	RETURN_TYPE_result2
    #define	RETURN_TYPE_result2 ASTNode *

    ExpressionNode * expression44;
    #undef	RETURN_TYPE_expression44
    #define	RETURN_TYPE_expression44 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new Ifnode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:2: ( 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:4: 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif'
        {
             MATCHT(42, &FOLLOW_42_in_ifStatement2165);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_ifStatement2167);
            expression44=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:20: ( EOL )?
            {
                int alt46=2;
                switch ( LA(1) )
                {
                    case EOL:
                    	{
                    		alt46=1;
                    	}
                        break;
                }

                switch (alt46)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:21: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2170);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(55, &FOLLOW_55_in_ifStatement2174);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:34: ( EOL )*

            for (;;)
            {
                int alt47=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt47=1;
                	}
                    break;

                }

                switch (alt47)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:34: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2176);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:39: (result= statement ( EOL )* )+
            {
                int cnt49=0;

                for (;;)
                {
                    int alt49=2;
            	switch ( LA(1) )
            	{
            	case ID:
            	case STRING:
            	case 33:
            	case 40:
            	case 42:
            	case 58:
            		{
            			alt49=1;
            		}
            	    break;

            	}

            	switch (alt49)
            	{
            	    case 1:
            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:40: result= statement ( EOL )*
            	        {
            	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2182);
            	            result=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleifStatementEx;
            	            }


            	            {
            	                node->addThen(result
            	                );
            	            }


            	            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:88: ( EOL )*

            	            for (;;)
            	            {
            	                int alt48=2;
            	                switch ( LA(1) )
            	                {
            	                case EOL:
            	                	{
            	                		alt48=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt48)
            	                {
            	            	case 1:
            	            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:364:88: EOL
            	            	    {
            	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2186);
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleifStatementEx;
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop48;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop48: ; /* Jump out to here if this rule does not match */


            	        }
            	        break;

            	    default:

            		if ( cnt49 >= 1 )
            		{
            		    goto loop49;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleifStatementEx;
            	}
            	cnt49++;
                }
                loop49: ;	/* Jump to here if this rule does not match */
            }

            {
                 node->setCondition(expression44
                );  
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:3: ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )?
            {
                int alt53=2;
                switch ( LA(1) )
                {
                    case 35:
                    	{
                    		alt53=1;
                    	}
                        break;
                }

                switch (alt53)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:4: 'else' ( EOL )* (result2= statement ( EOL )* )+
            	    {
            	         MATCHT(35, &FOLLOW_35_in_ifStatement2198);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:11: ( EOL )*

            	        for (;;)
            	        {
            	            int alt50=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt50=1;
            	            	}
            	                break;

            	            }

            	            switch (alt50)
            	            {
            	        	case 1:
            	        	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:11: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2200);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop50;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop50: ; /* Jump out to here if this rule does not match */


            	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:16: (result2= statement ( EOL )* )+
            	        {
            	            int cnt52=0;

            	            for (;;)
            	            {
            	                int alt52=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case ID:
            	        	case STRING:
            	        	case 33:
            	        	case 40:
            	        	case 42:
            	        	case 58:
            	        		{
            	        			alt52=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt52)
            	        	{
            	        	    case 1:
            	        	        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:17: result2= statement ( EOL )*
            	        	        {
            	        	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2206);
            	        	            result2=statement(ctx);

            	        	            FOLLOWPOP();
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleifStatementEx;
            	        	            }


            	        	            {
            	        	                node->addElse(result2
            	        	                 ); 
            	        	            }


            	        	            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:70: ( EOL )*

            	        	            for (;;)
            	        	            {
            	        	                int alt51=2;
            	        	                switch ( LA(1) )
            	        	                {
            	        	                case EOL:
            	        	                	{
            	        	                		alt51=1;
            	        	                	}
            	        	                    break;

            	        	                }

            	        	                switch (alt51)
            	        	                {
            	        	            	case 1:
            	        	            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:365:70: EOL
            	        	            	    {
            	        	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2211);
            	        	            	        if  (HASEXCEPTION())
            	        	            	        {
            	        	            	            goto ruleifStatementEx;
            	        	            	        }


            	        	            	    }
            	        	            	    break;

            	        	            	default:
            	        	            	    goto loop51;	/* break out of the loop */
            	        	            	    break;
            	        	                }
            	        	            }
            	        	            loop51: ; /* Jump out to here if this rule does not match */


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt52 >= 1 )
            	        		{
            	        		    goto loop52;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleifStatementEx;
            	        	}
            	        	cnt52++;
            	            }
            	            loop52: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

             MATCHT(36, &FOLLOW_36_in_ifStatement2223);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end ifStatement */

/**
 * $ANTLR start returnStatement
 * D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:369:1: returnStatement returns [ ReturnNode *node] : 'return' ( expression )? ;
 */
static ReturnNode *
returnStatement(pilwisscriptParser ctx)
{
    ReturnNode * node;


    ExpressionNode * expression45;
    #undef	RETURN_TYPE_expression45
    #define	RETURN_TYPE_expression45 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ReturnNode();

    {
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:373:2: ( 'return' ( expression )? )
        // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:373:4: 'return' ( expression )?
        {
             MATCHT(53, &FOLLOW_53_in_returnStatement2243);
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }


            // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:373:13: ( expression )?
            {
                int alt54=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 47:
                    	{
                    		alt54=1;
                    	}
                        break;
                }

                switch (alt54)
                {
            	case 1:
            	    // D:\\ilwisobjects\\projects\\ilwisscript\\parserlexer\\ilwisscript.g:373:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2245);
            	        expression45=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                node->addChild(expression45
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end returnStatement */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
